import 'package:civicalert/constants/ui_constants.dart';
import 'package:civicalert/features/complain/widgets/create_complain_button.dart';
import 'package:civicalert/theme/pallete.dart';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'dart:async';

class CreateComplainView extends ConsumerStatefulWidget {
  static route() =>
      MaterialPageRoute(builder: (context) => CreateComplainView());
  const CreateComplainView({super.key});

  @override
  ConsumerState<ConsumerStatefulWidget> createState() =>
      _CreateComplainViewState();
}

class _CreateComplainViewState extends ConsumerState<CreateComplainView> {
  final titleController = TextEditingController();
  final descriptionController = TextEditingController();
  final locationController = TextEditingController();
  final contactController = TextEditingController();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Pallete.coinswtichColor,
      appBar: UiConstants.createComplainAppBar(),
      body: SingleChildScrollView(
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: LayoutBuilder(
            builder: (BuildContext context, BoxConstraints constraints) {
              return Container(
                width: constraints.maxWidth,
                decoration: BoxDecoration(
                  color: Pallete.backgroundColor,
                  borderRadius: BorderRadius.circular(8),
                ),
                child: Padding(
                  padding: const EdgeInsets.all(16.0),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      DebouncedTextField(
                        controller: titleController,
                        label: 'Title',
                        hintText: 'Enter a brief title for the complaint',
                        maxLength: 50,
                        maxLines: 2,
                      ),
                      const SizedBox(height: 10),
                      DebouncedTextField(
                        controller: descriptionController,
                        label: 'Description',
                        hintText: 'Enter a brief Description for the complaint',
                        maxLength: 200,
                        maxLines: 5,
                      ),
                      const SizedBox(height: 10),
                      DebouncedTextField(
                        controller: locationController,
                        label: 'Location',
                        hintText: 'Specify the location of the complaint',
                        maxLength: 100,
                        maxLines: 3,
                        keyboardType: TextInputType.streetAddress,
                      ),
                      const SizedBox(height: 10),
                      DebouncedTextField(
                        controller: contactController,
                        label: 'Contact Number',
                        hintText: 'Enter your phone number',
                        maxLength: 10,
                        maxLines: 1,
                        keyboardType: TextInputType.phone,
                      ),
                    ],
                  ),
                ),
              );
            },
          ),
        ),
      ),
      bottomNavigationBar: Container(
        padding: const EdgeInsets.only(top: 10),
        decoration: const BoxDecoration(
          border: Border(
            top: BorderSide(
              color: Pallete.selectionColor,
              width: 0.5,
            ),
          ),
        ),
        child: Padding(
          padding: const EdgeInsets.all(8.0).copyWith(
            left: 25,
            right: 25,
            bottom: 40,
          ),
          child: CreateComplainButton(
            buttonText: 'Complain',
            onPressed: () {},
            isLoading: false,
          ),
        ),
      ),
    );
  }
}

class DebouncedTextField extends StatefulWidget {
  final TextEditingController controller;
  final String label;
  final String hintText;
  final int maxLength;
  final int maxLines;
  final TextInputType? keyboardType;

  const DebouncedTextField({
    super.key,
    required this.controller,
    required this.label,
    required this.hintText,
    required this.maxLength,
    required this.maxLines,
    this.keyboardType,
  });

  @override
  _DebouncedTextFieldState createState() => _DebouncedTextFieldState();
}

class _DebouncedTextFieldState extends State<DebouncedTextField> {
  Timer? _debounce;
  int _currentLength = 0;

  @override
  void initState() {
    super.initState();
    _currentLength = widget.controller.text.length;
    widget.controller.addListener(_onTextChanged);
  }

  @override
  void dispose() {
    _debounce?.cancel();
    widget.controller.removeListener(_onTextChanged);
    super.dispose();
  }

  void _onTextChanged() {
    if (_debounce?.isActive ?? false) _debounce!.cancel();
    _debounce = Timer(const Duration(milliseconds: 500), () {
      if (mounted) {
        setState(() {
          _currentLength = widget.controller.text.length;
        });
      }
    });
  }

  Widget _buildCounter(int currentLength, int maxLength) {
    return Text(
      '${maxLength - currentLength}',
      style: TextStyle(
        color: currentLength > (maxLength - 10)
            ? Colors.red
            : const Color.fromARGB(255, 115, 114, 114),
        fontSize: 13,
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Row(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          children: [
            Text(
              widget.label,
              style: const TextStyle(
                fontFamily: 'Gilroy',
                fontSize: 15,
                fontWeight: FontWeight.bold,
                letterSpacing: 1.5,
              ),
            ),
            _buildCounter(_currentLength, widget.maxLength),
          ],
        ),
        const SizedBox(height: 10),
        TextField(
          controller: widget.controller,
          maxLength: widget.maxLength,
          maxLines: widget.maxLines,
          keyboardType: widget.keyboardType,
          onTapOutside: (PointerDownEvent event) {
            FocusManager.instance.primaryFocus?.unfocus();
          },
          decoration: InputDecoration(
            hintText: widget.hintText,
            hintStyle: const TextStyle(
              fontFamily: 'Gilroy',
            ),
            enabledBorder: const OutlineInputBorder(
              borderSide: BorderSide(
                color: Color.fromARGB(255, 204, 202, 202),
              ),
            ),
            focusedBorder: const OutlineInputBorder(
              borderSide: BorderSide(
                color: Color.fromARGB(194, 0, 0, 0),
              ),
            ),
            counterText: '',
          ),
        ),
      ],
    );
  }
}
